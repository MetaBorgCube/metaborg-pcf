module pcf

imports

  nabl2/runtime/interpreter/scopegraph-api
  nabl2/runtime/interpreter/scopegraph-impl

  ds-signatures/PCF-sig
  ds-signatures/Desugared-sig

  analysis/base
  analysis/functions
  analysis/lets

signature

  sort aliases
    Env = Map(Id, Val)

  sorts Val constructors
    NumV     : Int -> Val
    ClosureV : Env * Id * Expr -> Val
    FixV     : Id * Val -> Val

  arrows
    Start -init-> Val
    Expr --> Val
 
  native operators
    parseI    : String -> Int
    addI      : Int * Int -> Int
    subtractI : Int * Int -> Int
    multiplyI : Int * Int -> Int
    divideI   : Int * Int -> Int

  variables
    v : Val

  components
    E : Env

rules

  start@Start(e) -init-> v
    where NaBL2(start) -init-> _;
          start -paramsOf-> s;
          E {} |- e --> v.

  Const(i) --> NumV(parseI(i)).
 
  Subtract(NumV(i), NumV(j)) --> NumV(subtractI(i, j)).

  BinExpr(NumV(i1), Plus(), NumV(i2)) --> NumV(addI(i1, i2)).
  BinExpr(NumV(i1), Minus(), NumV(i2)) --> NumV(subtractI(i1, i2)).
  BinExpr(NumV(i1), Times(), NumV(i2)) --> NumV(multiplyI(i1, i2)).
  BinExpr(NumV(i1), DividedBy(), NumV(i2)) --> NumV(divideI(i1, i2)).

  E |- Ref(x) --> E[x]
    where //x -mkOccurrence-> o;
          Occurrence(DefaultNamespace(),x,nabl2_indexOf(x)) -pathOf-> p.

  Ifz(NumV(0), v, _) --> v.
  Ifz(NumV(i), _, v) --> v
    where i != 0.

  E |- f@Fun(x, e) --> ClosureV(E, x, e)
    where f -paramsOf-> s;
          s -initFrame-> _;
        //x -mkOccurrence-> o;
          Occurrence(DefaultNamespace(),x,nabl2_indexOf(x)) -typeOf-> ty.

  App(ClosureV(E, x, e), v) --> v'
    where E {x |--> v, E} |- e --> v'.

  Fix(fun, e) --> FixV(fun, e).

  App(fix@FixV(fun, ClosureV(E, x, e)), v) --> v'
  where E {fun |--> fix, x |--> v, E} |- e --> v'.
 
  E |- Let(x, v1, e) --> v2
    where E {x |--> v1, E} |- e --> v2.

///////////////////////////////
//
// Dummy Stuff for Testing Only
//
////////////////////////////////

signature
  arrows
    Scope -initFrame-> Scope

rules

  s:Scope -initFrame-> s
    where s -declsOf-> ds;
          s -linksOf-> ls.
