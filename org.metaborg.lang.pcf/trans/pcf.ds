module pcf

imports

  nabl2/runtime/interpreter/scopegraph-api
  nabl2/runtime/interpreter/scopegraph-impl

  nabl2/runtime/interpreter/frame-api
  nabl2/runtime/interpreter/frame-impl

  nabl2/runtime/interpreter/util

  ds-signatures/PCF-sig

  analysis/base
  analysis/functions
  analysis/lets

signature

  constructors
    NumV     : Int -> Val
    ClosureV : Frame * Occurrence * Expr -> Val
  //FixV     : Occurrence * Val -> Val
    NullV    : Val

  arrows
    Start -init-> Val
    Expr --> Val
 
  native operators
    parseI    : String -> Int
    addI      : Int * Int -> Int
    subtractI : Int * Int -> Int
    multiplyI : Int * Int -> Int
    divideI   : Int * Int -> Int

  variables
    v : Val

rules

  start@Start(e) -init-> v
    where initNaBL2(start) --> NaBL2;
          NaBL2 |- start -paramsOf-> s;
          NaBL2 |- initHeap(start) --> H1;
          NaBL2 |- initDefault(s,{}) :: H1 --> F :: H2;
          NaBL2, F |- e :: H2 --> v.

  Const(i) --> NumV(parseI(i)).
 
  Add(NumV(i1), NumV(i2)) --> NumV(addI(i1, i2)).
  Subtract(NumV(i1), NumV(i2)) --> NumV(subtractI(i1, i2)).
  Multiply(NumV(i1), NumV(i2)) --> NumV(multiplyI(i1, i2)).
  Divide(NumV(i1),NumV(i2)) --> NumV(divideI(i1, i2)).

  Ref(x) :: H --> v
    where x -mkOccurrence-> o;
          o -pathOf-> p;
          H |- get(lookup(p)) --> v.

  Ifz(NumV(0), v, _) --> v.
  Ifz(NumV(i), _, v) --> v
    where i != 0.

  F |- Fun(x, e) --> ClosureV(F, o, e)
    where x -mkOccurrence-> o.

  App(ClosureV(F, o, e), v) :: H --> v'
    where e -paramsOf-> s;
          H |- scopeOf(F) --> sf;
          { P() |--> { sf |--> F } } => ls;
          { o |--> v } => vs;
          initFrame(s,ls,vs) --> F';
          F' |- e --> v'.

  F |- Let(x, v, e) :: H --> v'
    where e -paramsOf-> s;
          x -mkOccurrence-> o;
          H |- scopeOf(F) --> sf;
          { P() |--> { sf |--> F } } => ls;
          { o |--> v } => vs;
          initFrame(s,ls,vs) --> F';
          F' |- e --> v'.

//Fix(x, e) --> FixV(o, e)
//  where x -mkOccurrence-> o.

//App(fe@FixV(of, ClosureV(F, s, ov, e)), v) --> v'
//       E {fun |--> fix, x |--> v, E} |- e --> v'.
 
rules

  default(_) --> NullV().
