module analysis/base

imports

  signatures/-

signature

  sorts
    Type

  constructors
    TInt : Type
    TFun : Type * Type -> Type

  constraint generator

    [[ Start ^ (scope)        ]]
    [[ Expr  ^ (scope) : Type ]]

  name resolution
    labels
      P
      I
    order
      D < I,
      D < P,
      I < P
    well-formedness
      P* I*

rules

  init ^ (s) :=
    new s.

  [[ Start(e) ^ (s) ]] :=
    [[ e ^ (s) : ty ]].

rules

  [[ Const(_) ^ (_) : TInt() ]] :=
      true.
      
  [[ Ifz(c,t,f) ^ (s) : ty ]] :=
    [[ c ^ (s) : TInt() ]],
    [[ t ^ (s) : ty ]],
    [[ f ^ (s) : ty ]].

  [[ Add(e1,e2) ^ (s) : TInt() ]] :=
    [[ e1 ^ (s) : TInt() ]],
    [[ e2 ^ (s) : TInt() ]].

  [[ Subtract(e1,e2) ^ (s) : TInt() ]] :=
    [[ e1 ^ (s) : TInt() ]],
    [[ e2 ^ (s) : TInt() ]].

  [[ Multiply(e1,e2) ^ (s) : TInt() ]] :=
    [[ e1 ^ (s) : TInt() ]],
    [[ e2 ^ (s) : TInt() ]].

  [[ Divide(e1,e2) ^ (s) : TInt() ]] :=
    [[ e1 ^ (s) : TInt() ]],
    [[ e2 ^ (s) : TInt() ]].

