module analysis/base

imports

  signatures/-

signature

  constraint generator
    // scope parameters and (optionally) type per syntactic sort
    [[ Start ^ (scope)     ]]
    [[ Expr  ^ (scope) : * ]]

  name resolution
    // custom edge labels (extends default set of P, I)
    labels
    // partial order for the labels (extends default label order)
    // NB. for now implied pairs are not calculated,
    //     so make sure to be complete. E.g. in the case of
    //     X < Y, Y < Z you must add X < Z as well.
    order
      D < I,
      D < P,
      I < P
    // specify well-formedness regex (overrides default well-formedness)
    well-formedness
      P*.I*

  types
    TInt()
    TFun(type,type)
 
rules

  init ^ (s) : ty :=
    new s.

  [[ Start(e) ^ (s) : ty ]] :=
    [[ e ^ (s) : ty ]].

rules

  [[ Const(_) ^ (_) : TInt() ]] :=
    true.

  [[ Ifz(c,t,f) ^ (s) : ty ]] :=
    [[ c ^ (s) : TInt() ]],
    [[ t ^ (s) : ty ]],
    [[ f ^ (s) : ty ]].

  [[ BinExpr(e1,_,e2) ^ (s) : TInt() ]] :=
    [[ e1 ^ (s) : TInt() ]],
    [[ e2 ^ (s) : TInt() ]].

